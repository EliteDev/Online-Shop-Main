<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 1920 1080" width="1920" height="1080" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M0 368L29.2 387.8C58.3 407.7 116.7 447.3 174.8 451C233 454.7 291 422.3 349.2 372C407.3 321.7 465.7 253.3 523.8 215.5C582 177.7 640 170.3 698.2 191.8C756.3 213.3 814.7 263.7 872.8 308.7C931 353.7 989 393.3 1047.2 406C1105.3 418.7 1163.7 404.3 1221.8 390C1280 375.7 1338 361.3 1396.2 352.3C1454.3 343.3 1512.7 339.7 1570.8 316.2C1629 292.7 1687 249.3 1745.2 243.8C1803.3 238.3 1861.7 270.7 1890.8 286.8L1920 303L1920 0L1890.8 0C1861.7 0 1803.3 0 1745.2 0C1687 0 1629 0 1570.8 0C1512.7 0 1454.3 0 1396.2 0C1338 0 1280 0 1221.8 0C1163.7 0 1105.3 0 1047.2 0C989 0 931 0 872.8 0C814.7 0 756.3 0 698.2 0C640 0 582 0 523.8 0C465.7 0 407.3 0 349.2 0C291 0 233 0 174.8 0C116.7 0 58.3 0 29.2 0L0 0Z" fill="#ff0040"/><path d="M0 487L29.2 510.3C58.3 533.7 116.7 580.3 174.8 584C233 587.7 291 548.3 349.2 516C407.3 483.7 465.7 458.3 523.8 425.8C582 393.3 640 353.7 698.2 375.3C756.3 397 814.7 480 872.8 517.8C931 555.7 989 548.3 1047.2 562.7C1105.3 577 1163.7 613 1221.8 596.8C1280 580.7 1338 512.3 1396.2 494.3C1454.3 476.3 1512.7 508.7 1570.8 494.2C1629 479.7 1687 418.3 1745.2 425.5C1803.3 432.7 1861.7 508.3 1890.8 546.2L1920 584L1920 301L1890.8 284.8C1861.7 268.7 1803.3 236.3 1745.2 241.8C1687 247.3 1629 290.7 1570.8 314.2C1512.7 337.7 1454.3 341.3 1396.2 350.3C1338 359.3 1280 373.7 1221.8 388C1163.7 402.3 1105.3 416.7 1047.2 404C989 391.3 931 351.7 872.8 306.7C814.7 261.7 756.3 211.3 698.2 189.8C640 168.3 582 175.7 523.8 213.5C465.7 251.3 407.3 319.7 349.2 370C291 420.3 233 452.7 174.8 449C116.7 445.3 58.3 405.7 29.2 385.8L0 366Z" fill="#c02135"/><path d="M0 779L29.2 788C58.3 797 116.7 815 174.8 818.5C233 822 291 811 349.2 796.5C407.3 782 465.7 764 523.8 764C582 764 640 782 698.2 809C756.3 836 814.7 872 872.8 873.8C931 875.7 989 843.3 1047.2 830.8C1105.3 818.3 1163.7 825.7 1221.8 816.7C1280 807.7 1338 782.3 1396.2 764.3C1454.3 746.3 1512.7 735.7 1570.8 744.7C1629 753.7 1687 782.3 1745.2 802C1803.3 821.7 1861.7 832.3 1890.8 837.7L1920 843L1920 582L1890.8 544.2C1861.7 506.3 1803.3 430.7 1745.2 423.5C1687 416.3 1629 477.7 1570.8 492.2C1512.7 506.7 1454.3 474.3 1396.2 492.3C1338 510.3 1280 578.7 1221.8 594.8C1163.7 611 1105.3 575 1047.2 560.7C989 546.3 931 553.7 872.8 515.8C814.7 478 756.3 395 698.2 373.3C640 351.7 582 391.3 523.8 423.8C465.7 456.3 407.3 481.7 349.2 514C291 546.3 233 585.7 174.8 582C116.7 578.3 58.3 531.7 29.2 508.3L0 485Z" fill="#85262b"/><path d="M0 984L29.2 987.5C58.3 991 116.7 998 174.8 992.5C233 987 291 969 349.2 958.3C407.3 947.7 465.7 944.3 523.8 946.2C582 948 640 955 698.2 965.7C756.3 976.3 814.7 990.7 872.8 992.5C931 994.3 989 983.7 1047.2 967.5C1105.3 951.3 1163.7 929.7 1221.8 917C1280 904.3 1338 900.7 1396.2 906.2C1454.3 911.7 1512.7 926.3 1570.8 933.7C1629 941 1687 941 1745.2 953.5C1803.3 966 1861.7 991 1890.8 1003.5L1920 1016L1920 841L1890.8 835.7C1861.7 830.3 1803.3 819.7 1745.2 800C1687 780.3 1629 751.7 1570.8 742.7C1512.7 733.7 1454.3 744.3 1396.2 762.3C1338 780.3 1280 805.7 1221.8 814.7C1163.7 823.7 1105.3 816.3 1047.2 828.8C989 841.3 931 873.7 872.8 871.8C814.7 870 756.3 834 698.2 807C640 780 582 762 523.8 762C465.7 762 407.3 780 349.2 794.5C291 809 233 820 174.8 816.5C116.7 813 58.3 795 29.2 786L0 777Z" fill="#4d2221"/><path d="M0 1081L29.2 1081C58.3 1081 116.7 1081 174.8 1081C233 1081 291 1081 349.2 1081C407.3 1081 465.7 1081 523.8 1081C582 1081 640 1081 698.2 1081C756.3 1081 814.7 1081 872.8 1081C931 1081 989 1081 1047.2 1081C1105.3 1081 1163.7 1081 1221.8 1081C1280 1081 1338 1081 1396.2 1081C1454.3 1081 1512.7 1081 1570.8 1081C1629 1081 1687 1081 1745.2 1081C1803.3 1081 1861.7 1081 1890.8 1081L1920 1081L1920 1014L1890.8 1001.5C1861.7 989 1803.3 964 1745.2 951.5C1687 939 1629 939 1570.8 931.7C1512.7 924.3 1454.3 909.7 1396.2 904.2C1338 898.7 1280 902.3 1221.8 915C1163.7 927.7 1105.3 949.3 1047.2 965.5C989 981.7 931 992.3 872.8 990.5C814.7 988.7 756.3 974.3 698.2 963.7C640 953 582 946 523.8 944.2C465.7 942.3 407.3 945.7 349.2 956.3C291 967 233 985 174.8 990.5C116.7 996 58.3 989 29.2 985.5L0 982Z" fill="#171717"/></svg>